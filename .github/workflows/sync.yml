permissions:
  contents: write

name: API Docs Schema Nightly Sync
on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight UTC

jobs:
  sync_api_docs_with_binary_websocket_api:
    name: Nightly Sync API Docs with Binary Websocket API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: deriv-api-docs
          ref: master

      - name: Checkout binary-websocket-api Repository
        uses: actions/checkout@v4
        with:
          repository: regentmarkets/binary-websocket-api
          path: deriv-websockets-api
          token: ${{ secrets.API_SYNC_PAT }} # TODO: Replace with correct Personal Access Token when provided
          ref: master

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install Dependencies
        run: |
          npm install yaml
          npm install fs-extra

      - name: Copy Files From Source to Destination
        run: node deriv-api-docs/.github/scripts/get-web-socket-api-list.js

      - name: Generate Branch Name
        id: generateBranchName
        run: echo "BRANCH=update-schema_$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: createPullRequest
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: JSON Schema Update
          title: JSON Schema Update
          body: JSON Schema Update
          branch: ${{ steps.generateBranchName.outputs.BRANCH }}
          base: master
          token: ${{ secrets.GITHUB_TOKEN }}
          path: deriv-api-docs
          delete-branch: true

      - name: Wait for Checks
        if: ${{ steps.createPullRequest.outputs.pull-request-head-sha != '' }}
        id: waitForChecks
        uses: actions/github-script@v6
        with:
          retries: 5
          script: |
            const owner = '${{ github.repository_owner }}'
            const repo = '${{ github.event.repository.name }}'
            const ref = '${{ steps.createPullRequest.outputs.pull-request-head-sha }}'
            let checkRunsCount = 0;
            let areChecksPending = true;
            let haveChecksPassed = false;

            do {
              const checks = await github.rest.checks.listForRef({
                owner,
                repo,
                ref,
              });
              checkRunsCount = checks.data.total_count;
              const checkRuns = checks.data.check_runs;
              haveChecksPassed = checkRuns.every((checkRun) => checkRun.status === 'completed' && checkRun.conclusion === 'success');
              areChecksPending = checkRuns.some((checkRun) => checkRun.status === 'in_progress' || checkRun.status === 'queued');
              await new Promise(resolve => setTimeout(resolve, 60 * 1000)); // Sleep for 1 minute before checking again
            } while (checkRunsCount === 0 || areChecksPending);
            // Set the output variable
            core.setOutput('HAVE_CHECKS_PASSED', haveChecksPassed);

      - name: Merge Pull Request
        if: ${{ steps.waitForChecks.outputs.HAVE_CHECKS_PASSED == 'true' }}
        uses: juliangruber/merge-pull-request-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.createPullRequest.outputs.pull-request-number }}
          method: squash # merge rebase

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: logs/*.txt

  send_slack_notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    if: always()
    needs:
      - sync_api_docs_with_binary_websocket_api
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Conclusion
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send Slack Notification on Success
        if: ${{ env.WORKFLOW_CONCLUSION == 'success' }}
        run: |-
          curl -X POST -H 'Content-type: application/json' \
          --data '{
          "text": "Api Sync Successful. Please check the logs for more details."
          }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}\

      - name: Send Slack Notification on Failure
        if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        run: |-
          curl -X POST -H 'Content-type: application/json' \
          --data '{
          "text": "Api Sync Failed. Please check the logs for more details."
          }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}\
