version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  npm_install_from_cache:
    description: "npm install and save cache"
    steps:
      - restore_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm dependencies
          command: npm install
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
  build:
    description: "Build Docusaurus project"
    steps:
      - run:
          name: Building Docusaurus project
          command: npm run build

  versioning:
    description: "Versioning the image"
    parameters:
      version_name:
        type: string
        default: "staging"
    steps:
      - run:
          name: Tag build
          command: echo "<< parameters.version_name >> $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > build/version

  docker_build_push:
    description: "Build and push Docker image to Docker Hub"
    parameters:
      docker_latest_image_tag:
        type: string
        default: "latest-staging"
      docker_image_tag:
        type: string
        default: ${CIRCLE_SHA1}
    steps:
      - setup_remote_docker
      - run:
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/deriv-com-api:<< parameters.docker_image_tag >> -t ${DOCKHUB_ORGANISATION}/deriv-com-api:<< parameters.docker_latest_image_tag >> .
      - run:
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/deriv-com-api:<< parameters.docker_image_tag >>
            docker push ${DOCKHUB_ORGANISATION}/deriv-com-api:<< parameters.docker_latest_image_tag >>
  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      target:
        type: string
        default: "beta"
      k8s_version:
        type: string
        default: ${CIRCLE_SHA1}
      k8s_namespace:
        type: string
        default: "deriv-com-api-staging"
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster for service << parameters.k8s_namespace >>
          command: |
            export NAMESPACE=<< parameters.k8s_namespace >>
            git clone https://github.com/binary-com/devops-ci-scripts
            cd devops-ci-scripts/k8s-build_tools
            echo $CA_CRT | base64 --decode > ca.crt
            ./release.sh deriv-com-api << parameters.k8s_version >>
  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for api.deriv.com with version *$(cat build/version)*"
          success_message: "Release succeeded for api.deriv.com with version *$(cat build/version)*"
          webhook: ${SLACK_WEBHOOK}
  publish_to_pages_staging:
    description: "Publish to cloudflare pages"
    steps:
      - run:
          name: "Publish to cloudflare pages (staging)"
          command: |
            npm i wrangler@2.0.19
            cd build
            npx wrangler pages publish . --project-name=deriv-developers-portal-pages --branch=staging
            echo "New staging website - https://staging-api.deriv.com/"

  publish_to_pages_production:
    description: "Publish to cloudflare pages"
    steps:
      - run:
          name: "Publish to cloudflare pages (production)"
          command: |
            npm i wrangler@2.0.19
            cd build
            npx wrangler pages publish . --project-name=deriv-developers-portal-pages --branch=main
            echo "New website - https://api.deriv.com"

jobs:
  build:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - npm_install_from_cache
      - build

  release_staging:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - npm_install_from_cache
      - build
      - versioning
      - docker_build_push
      - k8s_deploy
      - publish_to_pages_staging
      - notify_slack
    environment:
      NODE_ENV: staging

  release_production:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - npm_install_from_cache
      - build
      - versioning:
          version_name: production
      - docker_build_push:
          docker_latest_image_tag: latest
          docker_image_tag: ${CIRCLE_SHA1}
      - k8s_deploy:
          k8s_namespace: "deriv-com-api-production"
          k8s_version: ${CIRCLE_SHA1}
      - publish_to_pages_production
      - notify_slack
    environment:
      NODE_ENV: production

workflows:
  release_staging:
    jobs:
      - release_staging:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              only: /^master$/
  release_production:
    jobs:
      - release_production:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
